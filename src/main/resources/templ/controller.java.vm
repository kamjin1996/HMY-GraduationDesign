package ${package.Controller};

import com.baomidou.mybatisplus.plugins.Page;

import com.zxx.hmy520.graduationdesign.base.controller.result.Result;
#set($lastIndexOf=${package.Entity.lastIndexOf('.')})
#set($basePackge=${package.Entity.substring(0,$lastIndexOf)})
import ${basePackge}.query.${entity}Query;
import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;
import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Api(value = "${table.controllerName}", tags = "【$!{table.comment}】")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end
#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    public ${table.serviceName} ${table.entityPath}Service;

    /**
     * 根据ID查询
     *
     * @param id
     * @return
     */
    @GetMapping(value = "/{id}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiOperation(value = "根据ID查询", httpMethod = "GET", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiResponse(code = 200, message = "success", response = Result.class)
    public Result<${entity}> loadById(@PathVariable(value = "id") Long id) {
        return response(this.${table.entityPath}Service.findById(id));
    }


    /**
     * 分页查询
     *
     * @param query
     * @return
     */
    @GetMapping(value = "/page", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiOperation(value = "总分页查询", httpMethod = "GET", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
##    @ApiImplicitParams({@ApiImplicitParam(name = "pageNo", value = "起始页 [默认1]", paramType = "query"),
##            @ApiImplicitParam(name = "pageSize", value = "分页大小[默认10]", paramType = "query"),
##            @ApiImplicitParam(name = "orderByField", value = "排序字段", paramType = "query"),
##            @ApiImplicitParam(name = "isAsc", value = "是否升序", paramType = "query"),
##            @ApiImplicitParam(name = "keyword", value = "关键词", paramType = "query")})
    @ApiResponse(code = 200, message = "success", response = Result.class)
    public Result<Page<${entity}>> loadByPage(${entity}Query query) {
        return response(this.${table.entityPath}Service.findByPage(query));
    }

    /**
     * 新增
     *
     * @param ${table.entityPath}
     * @return
     */
    @PostMapping(value = "", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiOperation(value = "新增", httpMethod = "POST", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiResponse(code = 200, message = "success", response = Result.class)
    public Result<Boolean> add(@RequestBody ${entity} ${table.entityPath}) {
        return response(this.${table.entityPath}Service.add(${table.entityPath}));
    }

    /**
     * 修改
     *
     * @param ${table.entityPath}
     * @return
     */
    @PutMapping(value = "", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiOperation(value = "修改", httpMethod = "PUT", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiResponse(code = 200, message = "success", response = Result.class)
    public Result<Boolean> update(@RequestBody ${entity} ${table.entityPath}) {
        return response(this.${table.entityPath}Service.update(${table.entityPath}));
    }


    /**
     * 根据ID删除
     *
     * @param id
     * @return
     */
    @DeleteMapping(value = "/{id}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiOperation(value = "根据ID删除", httpMethod = "DELETE", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiResponse(code = 200, message = "success", response = Result.class)
    public Result<Object> delete(@PathVariable(value = "id") Long id) {
        this.${table.entityPath}Service.delete(id);
        return response();
    }

}

#end